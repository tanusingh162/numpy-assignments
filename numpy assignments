{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "dd5c4548-8b8c-4751-9c0e-ca4d24db8688",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "int32\n",
      "Data type is float64\n",
      "[1.+2.j 3.+4.j 5.+6.j]\n",
      "float32\n",
      "float32\n",
      "((2, 2), 4, dtype('int32'))\n",
      "2\n",
      "(4, 12)\n",
      "(8, 4)\n",
      "((2, 2), (8, 4))\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    " 1.# Create a NumPy array arr of integers from 0 to 5 and print its data type.\n",
    "import numpy as np\n",
    "\n",
    "arr = np.array([0, 1, 2, 3, 4, 5])\n",
    "print(arr.dtype)\n",
    "2.# numpy as np\n",
    "\n",
    "arr = np.array([1.0, 2.0, 3.0])\n",
    "if arr.dtype == np.float64:\n",
    "    print(\"Data type is float64\")\n",
    "else:\n",
    "    print(\"Data type is not float64\")\n",
    " 3.# Create a NumPy array arr with a data type of complex128 containing three complex numbers.\n",
    "import numpy as np\n",
    "\n",
    "arr = np.array([1 + 2j, 3 + 4j, 5 + 6j], dtype=np.complex128)\n",
    "print(arr)\n",
    " 4. #Convert an existing NumPy array arr of integers to float32 data type.\n",
    "import numpy as np\n",
    "\n",
    "arr = np.array([1, 2, 3])\n",
    "arr = arr.astype(np.float32)\n",
    "print(arr.dtype)\n",
    " 5.# Given a NumPy array arr with float64 data type, convert it to float32 to reduce decimal precision.\n",
    "import numpy as np\n",
    "\n",
    "arr = np.array([1.0, 2.0, 3.0], dtype=np.float64)\n",
    "arr = arr.astype(np.float32)\n",
    "print(arr.dtype)\n",
    " 6.# Write a function array_attributes that takes a NumPy array as input and returns its shape, size, and data type.\n",
    "import numpy as np\n",
    "\n",
    "def array_attributes(arr):\n",
    "    return arr.shape, arr.size, arr.dtype\n",
    "\n",
    "arr = np.array([[1, 2], [3, 4]])\n",
    "print(array_attributes(arr))\n",
    " 7.# Create a function array_dimension that returns the dimensionality of a NumPy array.\n",
    "import numpy as np\n",
    "\n",
    "def array_dimension(arr):\n",
    "    return arr.ndim\n",
    "\n",
    "arr = np.array([[1, 2], [3, 4]])\n",
    "print(array_dimension(arr))\n",
    "8. #Design a function item_size_info that returns the item size and total size in bytes of a NumPy array.\n",
    "import numpy as np\n",
    "\n",
    "def item_size_info(arr):\n",
    "    return arr.itemsize, arr.nbytes\n",
    "\n",
    "arr = np.array([1, 2, 3])\n",
    "print(item_size_info(arr))\n",
    " 9.# Create a function array_strides that returns the strides of the given NumPy array.\n",
    "import numpy as np\n",
    "\n",
    "def array_strides(arr):\n",
    "    return arr.strides\n",
    "\n",
    "arr = np.array([[1, 2], [3, 4]])\n",
    "print(array_strides(arr))\n",
    "10.# Design a function shape_stride_relationship that returns the shape and strides of the given array.\n",
    "import numpy as np\n",
    "\n",
    "def shape_stride_relationship(arr):\n",
    "    return arr.shape, arr.strides\n",
    "\n",
    "arr = np.array([[1, 2], [3, 4]])\n",
    "print(shape_stride_relationship(arr))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "bf00b780-9cc8-469b-a55f-dc7ed94b998c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0. 0. 0. 0. 0.]\n",
      "[[1. 1. 1. 1.]\n",
      " [1. 1. 1. 1.]\n",
      " [1. 1. 1. 1.]]\n",
      "[1 3 5 7 9]\n",
      "[ 0.   2.5  5.   7.5 10. ]\n",
      "[[1. 0. 0. 0. 0.]\n",
      " [0. 1. 0. 0. 0.]\n",
      " [0. 0. 1. 0. 0.]\n",
      " [0. 0. 0. 1. 0.]\n",
      " [0. 0. 0. 0. 1.]]\n",
      "[1 2 3 4 5]\n",
      "[1 2 3 4 5]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "## 11. Create a function create_zeros_array(n) to return a NumPy array of zeros with n elements\n",
    "import numpy as np\n",
    "\n",
    "def create_zeros_array(n):\n",
    "    return np.zeros(n)\n",
    "\n",
    "print(create_zeros_array(5))\n",
    "## 12. Write a function create_ones_matrix(rows, cols) to create a 2D array filled with ones.\n",
    "import numpy as np\n",
    "\n",
    "def create_ones_matrix(rows, cols):\n",
    "    return np.ones((rows, cols))\n",
    "\n",
    "print(create_ones_matrix(3, 4))\n",
    "## 13. Write a function generate_range_array(start, stop, step) to create a ranged NumPy array\n",
    "import numpy as np\n",
    "\n",
    "def generate_range_array(start, stop, step):\n",
    "    return np.arange(start, stop, step)\n",
    "\n",
    "print(generate_range_array(1, 10, 2))\n",
    "## 14. Design a function generate_linear_space(start, stop, num) for equally spaced values.\n",
    "import numpy as np\n",
    "\n",
    "def generate_linear_space(start, stop, num):\n",
    "    return np.linspace(start, stop, num)\n",
    "\n",
    "print(generate_linear_space(0, 10, 5))\n",
    "## 15. Create a function create_identity_matrix(n) using numpy.eye.\n",
    "import numpy as np\n",
    "\n",
    "def create_identity_matrix(n):\n",
    "    return np.eye(n)\n",
    "\n",
    "print(create_identity_matrix(5))\n",
    "## 16. Write a function that converts a Python list into a NumPy array\n",
    "import numpy as np\n",
    "\n",
    "def convert_list_to_array(lst):\n",
    "    return np.array(lst)\n",
    "\n",
    "lst = [1, 2, 3, 4, 5]\n",
    "print(convert_list_to_array(lst))\n",
    "## 17. Create a NumPy array and use numpy.view() to create a new view with the same data\n",
    "import numpy as np\n",
    "\n",
    "arr = np.array([1, 2, 3, 4, 5])\n",
    "new_view = arr.view()\n",
    "print(new_view)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b3ab3295-bfde-40e9-85a7-e208e16ecf61",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 2]\n",
      " [3 4]\n",
      " [5 6]\n",
      " [7 8]]\n",
      "[[1 2 5 6]\n",
      " [3 4 7 8]]\n",
      "[[1 2 3]\n",
      " [4 5 6]\n",
      " [7 8 9]]\n",
      "[1 3 5 7 9]\n",
      "[0.         0.11111111 0.22222222 0.33333333 0.44444444 0.55555556\n",
      " 0.66666667 0.77777778 0.88888889 1.        ]\n",
      "[   1.            5.62341325   31.6227766   177.827941   1000.        ]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "## 18. Write a function to concatenate two NumPy arrays along a specified axis.\n",
    "import numpy as np\n",
    "\n",
    "def concatenate_arrays(arr1, arr2, axis):\n",
    "    return np.concatenate((arr1, arr2), axis=axis)\n",
    "\n",
    "arr1 = np.array([[1, 2], [3, 4]])\n",
    "arr2 = np.array([[5, 6], [7, 8]])\n",
    "print(concatenate_arrays(arr1, arr2, axis=0))\n",
    "## 19. Concatenate two arrays with different shapes horizontally using numpy.concatenate.\n",
    "import numpy as np\n",
    "\n",
    "arr1 = np.array([[1, 2], [3, 4]])\n",
    "arr2 = np.array([[5, 6], [7, 8]])\n",
    "print(np.concatenate((arr1, arr2), axis=1))\n",
    "## 20. Vertically stack multiple arrays from a list using numpy.vstack.\n",
    "import numpy as np\n",
    "\n",
    "arrays = [np.array([1, 2, 3]), np.array([4, 5, 6]), np.array([7, 8, 9])]\n",
    "print(np.vstack(arrays))\n",
    "## 21. Write a function to generate an array of integers within a specified range (inclusive) with a step.\n",
    "import numpy as np\n",
    "\n",
    "def generate_array(start, stop, step):\n",
    "    return np.arange(start, stop + 1, step)\n",
    "\n",
    "print(generate_array(1, 10, 2))\n",
    "## 22. Generate 10 equally spaced values between 0 and 1 using NumPy.\n",
    "import numpy as np\n",
    "\n",
    "print(np.linspace(0, 1, 10))\n",
    "## 23. Create 5 logarithmically spaced values between 1 and 1000.\n",
    "import numpy as np\n",
    "\n",
    "print(np.logspace(0, 3, 5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "49e61191-d995-42ae-9000-cefb8c0c21a1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    A   B   C\n",
      "0  45  48  65\n",
      "1  68  68  10\n",
      "2  84  22  37\n",
      "3  88  71  89\n",
      "4  89  13  59\n",
      "   A  B\n",
      "0  0  5\n",
      "1  2 -6\n",
      "2  0  7\n",
      "3  4 -8\n",
      "3\n",
      "6\n",
      "[6 7 8 9]\n",
      "[3 4 5 6]\n",
      "[[2 3]\n",
      " [5 6]]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "## 24. Create a Pandas DataFrame from a NumPy array with 5 rows and 3 columns of random integers (1-100).\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "np.random.seed(0)\n",
    "arr = np.random.randint(1, 101, size=(5, 3))\n",
    "df = pd.DataFrame(arr, columns=['A', 'B', 'C'])\n",
    "print(df)\n",
    "## 25. Write a function to replace all negative values in a specific column with zeros using NumPy Indexing and Slicing\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "def replace_negative_with_zero(df, column):\n",
    "    df[column] = np.where(df[column] < 0, 0, df[column])\n",
    "    return df\n",
    "\n",
    "# Example usage:\n",
    "df = pd.DataFrame({\n",
    "    'A': [-1, 2, -3, 4],\n",
    "    'B': [5, -6, 7, -8]\n",
    "})\n",
    "print(replace_negative_with_zero(df, 'A'))\n",
    "## 26. Access the 3rd element from the given NumPy array.\n",
    "import numpy as np\n",
    "\n",
    "arr = np.array([1, 2, 3, 4, 5])\n",
    "print(arr[2])\n",
    "## 27. Retrieve the element at index (1, 2) from a 2D array.\n",
    "import numpy as np\n",
    "\n",
    "arr = np.array([[1, 2, 3], [4, 5, 6]])\n",
    "print(arr[1, 2])\n",
    "## 28. Extract elements greater than 5 using boolean indexing\n",
    "import numpy as np\n",
    "\n",
    "arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])\n",
    "print(arr[arr > 5])\n",
    "## 29. Slice elements from index 2 to 5 (inclusive) from a NumPy array.\n",
    "import numpy as np\n",
    "\n",
    "arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])\n",
    "print(arr[2:6])\n",
    "## 30. Slice the sub-array [[2, 3], [5, 6]] from a 2D array\n",
    "import numpy as np\n",
    "\n",
    "arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n",
    "print(arr[0:2, 1:3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7c9cb252-9ec1-4d40-bbbc-8c813435dd8e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1 5 9]\n",
      "[6 7 8 9]\n",
      "[ 2 12]\n",
      "[4 5 6]\n",
      "[1 5 9]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "## 31. Extract elements based on indices from a 2D array.\n",
    "import numpy as np\n",
    "\n",
    "arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n",
    "indices = np.array([0, 1, 2])\n",
    "print(arr[np.arange(arr.shape[0]), indices])\n",
    "## 32. Filter elements greater than a threshold using boolean indexing.\n",
    "import numpy as np\n",
    "\n",
    "arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])\n",
    "threshold = 5\n",
    "print(arr[arr > threshold])\n",
    "## 33. Extract specific elements from a 3D array using separate index arrays.\n",
    "import numpy as np\n",
    "\n",
    "arr = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])\n",
    "indices_i = np.array([0, 1])\n",
    "indices_j = np.array([0, 1])\n",
    "indices_k = np.array([1, 2])\n",
    "print(arr[indices_i, indices_j, indices_k])\n",
    "## 34. Return elements satisfying two boolean conditions.\n",
    "import numpy as np\n",
    "\n",
    "arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])\n",
    "condition1 = arr > 3\n",
    "condition2 = arr < 7\n",
    "print(arr[condition1 & condition2])\n",
    "## 35. Extract elements from a 2D array using separate row and column index arrays.\n",
    "import numpy as np\n",
    "\n",
    "arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n",
    "row_indices = np.array([0, 1, 2])\n",
    "col_indices = np.array([0, 1, 2])\n",
    "print(arr[row_indices, col_indices])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "77a359ee-adfb-4e05-865a-16d003e55536",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 6  7  8  9 10]\n",
      "[[ 2  4  6  8]\n",
      " [15 18 21 24]\n",
      " [36 40 44 48]]\n",
      "[[ 2  4  6  8]\n",
      " [ 6  8 10 12]\n",
      " [10 12 14 16]\n",
      " [14 16 18 20]]\n",
      "[[5 6 7]\n",
      " [6 7 8]\n",
      " [7 8 9]]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "## 36. Add scalar 5 to every element of an array using broadcasting.\n",
    "import numpy as np\n",
    "\n",
    "arr = np.array([1, 2, 3, 4, 5])\n",
    "result = arr + 5\n",
    "print(result)\n",
    "## 37. Multiply each row of a (3, 4) array by corresponding elements of a (3, 1) array.\n",
    "import numpy as np\n",
    "\n",
    "arr = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n",
    "multiplier = np.array([[2], [3], [4]])\n",
    "result = arr * multiplier\n",
    "print(result)\n",
    "## 38. Add a (1, 4) array to every row of a (4, 4) array using broadcasting.\n",
    "import numpy as np\n",
    "\n",
    "arr = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])\n",
    "addition = np.array([[1, 2, 3, 4]])\n",
    "result = arr + addition\n",
    "print(result)\n",
    "## 39. Add two arrays of shapes (3, 1) and (1, 3) using broadcasting.\n",
    "import numpy as np\n",
    "\n",
    "arr1 = np.array([[1], [2], [3]])\n",
    "arr2 = np.array([[4, 5, 6]])\n",
    "result = arr1 + arr2\n",
    "print(result)\n",
    "## 40. Handle shape incompatibility during multiplication between (2, 3) and (2, 2) arrays.\n",
    "import numpy as np\n",
    "\n",
    "arr1 = np.array([[1, 2, 3], [4, 5, 6]])\n",
    "arr2 = np.array([[2, 3], [4, 5]])\n",
    "\n",
    "# To perform element-wise multiplication, arr2 needs to be reshaped or broadcasted to match arr1's shape.\n",
    "# However, given the shapes (2,3) and (2,2), direct element-wise multiplication isn't possible without further specification.\n",
    "\n",
    "# One potential solution is to ensure arr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ac4fe9e3-f1b0-4a8e-8ce4-48f526376859",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2.5 3.5 4.5]\n",
      "[3 6]\n",
      "[1 1 1]\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "operands could not be broadcast together with shapes (2,3) (2,2) ",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[10], line 27\u001b[0m\n\u001b[0;32m     25\u001b[0m arr \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39marray([[\u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m2\u001b[39m, \u001b[38;5;241m3\u001b[39m, \u001b[38;5;241m4\u001b[39m], [\u001b[38;5;241m5\u001b[39m, \u001b[38;5;241m6\u001b[39m, \u001b[38;5;241m7\u001b[39m, \u001b[38;5;241m8\u001b[39m]])\n\u001b[0;32m     26\u001b[0m window_size \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m2\u001b[39m\n\u001b[1;32m---> 27\u001b[0m result \u001b[38;5;241m=\u001b[39m moving_sum(arr, window_size)\n\u001b[0;32m     28\u001b[0m \u001b[38;5;28mprint\u001b[39m(result)\n\u001b[0;32m     30\u001b[0m \u001b[38;5;66;03m## 45. Check if all elements in each column are even\u001b[39;00m\n",
      "Cell \u001b[1;32mIn[10], line 23\u001b[0m, in \u001b[0;36mmoving_sum\u001b[1;34m(arr, window_size)\u001b[0m\n\u001b[0;32m     22\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mmoving_sum\u001b[39m(arr, window_size):\n\u001b[1;32m---> 23\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m np\u001b[38;5;241m.\u001b[39mcumsum(arr, axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m)[:, window_size\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m:] \u001b[38;5;241m-\u001b[39m np\u001b[38;5;241m.\u001b[39mcumsum(arr, axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m)[:, :\u001b[38;5;241m-\u001b[39mwindow_size]\n",
      "\u001b[1;31mValueError\u001b[0m: operands could not be broadcast together with shapes (2,3) (2,2) "
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "## 41. Calculate column-wise mean of a 2D array.\n",
    "import numpy as np\n",
    "\n",
    "arr = np.array([[1, 2, 3], [4, 5, 6]])\n",
    "mean = np.mean(arr, axis=0)\n",
    "print(mean)\n",
    "## 42. Find maximum value in each row.\n",
    "import numpy as np\n",
    "\n",
    "arr = np.array([[1, 2, 3], [4, 5, 6]])\n",
    "max_values = np.max(arr, axis=1)\n",
    "print(max_values)\n",
    "## 43. Find indices of maximum values in each column.\n",
    "import numpy as np\n",
    "\n",
    "arr = np.array([[1, 2, 3], [4, 5, 6]])\n",
    "indices = np.argmax(arr, axis=0)\n",
    "print(indices)\n",
    "## 44. Apply a custom function to compute moving sum along rows.\n",
    "import numpy as np\n",
    "\n",
    "def moving_sum(arr, window_size):\n",
    "    return np.cumsum(arr, axis=1)[:, window_size-1:] - np.cumsum(arr, axis=1)[:, :-window_size]\n",
    "\n",
    "arr = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])\n",
    "window_size = 2\n",
    "result = moving_sum(arr, window_size)\n",
    "print(result)\n",
    "\n",
    "## 45. Check if all elements in each column are even\n",
    "import numpy as np\n",
    "\n",
    "arr = np.array([[2, 4, 6], [8, 10, 12]])\n",
    "result = np.all(arr % 2 == 0, axis=0)\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "0a6c373a-c326-4aab-9565-18544b97d4a0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 2 3]\n",
      " [4 5 6]]\n",
      "[1 2 3 4 5 6]\n",
      "[[1 2]\n",
      " [3 4]\n",
      " [5 6]\n",
      " [7 8]]\n",
      "[array([[1, 2, 3]]), array([[4, 5, 6]])]\n",
      "[ 1  2 10  3  4  5]\n",
      "[1 2 3 4 5]\n",
      "[5 7 9]\n",
      "[-3 -3 -3]\n",
      "[ 4 10 18]\n",
      "[0.25 0.4  0.5 ]\n",
      "[  1  32 729]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "## 46. Reshape a given array into dimensions mxn.\n",
    "import numpy as np\n",
    "\n",
    "arr = np.array([1, 2, 3, 4, 5, 6])\n",
    "m, n = 2, 3\n",
    "arr_reshaped = arr.reshape(m, n)\n",
    "print(arr_reshaped)\n",
    "## 47. Return a flattened version of a given matrix.\n",
    "import numpy as np\n",
    "\n",
    "arr = np.array([[1, 2, 3], [4, 5, 6]])\n",
    "arr_flattened = arr.flatten()\n",
    "print(arr_flattened)\n",
    "## 48. Concatenate two arrays along a specified axis.\n",
    "import numpy as np\n",
    "\n",
    "arr1 = np.array([[1, 2], [3, 4]])\n",
    "arr2 = np.array([[5, 6], [7, 8]])\n",
    "axis = 0\n",
    "arr_concatenated = np.concatenate((arr1, arr2), axis=axis)\n",
    "print(arr_concatenated)\n",
    "## 49. Split an array into sub-arrays along a specified axis.\n",
    "import numpy as np\n",
    "\n",
    "arr = np.array([[1, 2, 3], [4, 5, 6]])\n",
    "axis = 0\n",
    "arr_split = np.split(arr, 2, axis=axis)\n",
    "print(arr_split)\n",
    "## 50. Insert and delete elements at specified indices from an array.\n",
    "import numpy as np\n",
    "\n",
    "arr = np.array([1, 2, 3, 4, 5])\n",
    "# Insert 10 at index 2\n",
    "arr = np.insert(arr, 2, 10)\n",
    "print(arr)\n",
    "# Delete element at index 2\n",
    "arr = np.delete(arr, 2)\n",
    "print(arr)\n",
    "## 51. Perform element-wise addition between two arrays.\n",
    "import numpy as np\n",
    "\n",
    "arr1 = np.array([1, 2, 3])\n",
    "arr2 = np.array([4, 5, 6])\n",
    "result = arr1 + arr2\n",
    "print(result)\n",
    "## 52. Perform element-wise subtraction: subtract arr2 from arr1.\n",
    "import numpy as np\n",
    "\n",
    "arr1 = np.array([1, 2, 3])\n",
    "arr2 = np.array([4, 5, 6])\n",
    "result = arr1 - arr2\n",
    "print(result)\n",
    "## 53. Perform element-wise multiplication.\n",
    "import numpy as np\n",
    "\n",
    "arr1 = np.array([1, 2, 3])\n",
    "arr2 = np.array([4, 5, 6])\n",
    "result = arr1 * arr2\n",
    "print(result)\n",
    "## 54. Divide elements of arr1 by arr2 element-wise.\n",
    "import numpy as np\n",
    "\n",
    "arr1 = np.array([1, 2, 3])\n",
    "arr2 = np.array([4, 5, 6])\n",
    "result = arr1 / arr2\n",
    "print(result)\n",
    "## 55. Perform element-wise exponentiation arr1^arr2.\n",
    "import numpy as np\n",
    "\n",
    "arr1 = np.array([1, 2, 3])\n",
    "arr2 = np.array([4, 5, 6])\n",
    "result = np.power(arr1, arr2)\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a631ed3a-ff7e-4ff0-a35a-5c8fe127c683",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1 0 1]\n",
      "['HW' 'FB']\n"
     ]
    },
    {
     "ename": "NameError",
     "evalue": "name 'replace' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[12], line 22\u001b[0m\n\u001b[0;32m     20\u001b[0m new_substring \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mhi\u001b[39m\u001b[38;5;124m'\u001b[39m\n\u001b[0;32m     21\u001b[0m replaced \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mchar\u001b[38;5;241m.\u001b[39mreplace(arr, old_substring, new_substring)\n\u001b[1;32m---> 22\u001b[0m \u001b[38;5;28mprint\u001b[39m(replace)\n\u001b[0;32m     23\u001b[0m \u001b[38;5;66;03m## 59. Concatenate strings in a NumPy array element-wise.\u001b[39;00m\n\u001b[0;32m     24\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mnumpy\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mnp\u001b[39;00m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'replace' is not defined"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "## 56. Count occurrences of a substring in a string array.\n",
    "import numpy as np\n",
    "\n",
    "arr = np.array(['hello world', 'world cup', 'hello again'])\n",
    "substring = 'hello'\n",
    "counts = np.char.count(arr, substring)\n",
    "print(counts)\n",
    "## 57. Extract uppercase characters from a string array.\n",
    "import numpy as np\n",
    "import re\n",
    "\n",
    "arr = np.array(['Hello World', 'Foo Bar'])\n",
    "uppercase_chars = np.vectorize(lambda s: ''.join(re.findall(r'[A-Z]', s)))(arr)\n",
    "print(uppercase_chars)\n",
    "## 58. Replace substring occurrences with another string in a string array.\n",
    "import numpy as np\n",
    "\n",
    "arr = np.array(['hello world', 'world cup', 'hello again'])\n",
    "old_substring = 'hello'\n",
    "new_substring = 'hi'\n",
    "replaced = np.char.replace(arr, old_substring, new_substring)\n",
    "print(replace)\n",
    "## 59. Concatenate strings in a NumPy array element-wise.\n",
    "import numpy as np\n",
    "\n",
    "arr1 = np.array(['Hello', 'World'])\n",
    "arr2 = np.array([' ', 'Cup'])\n",
    "result = np.char.add(arr1, arr2)\n",
    "print(result)\n",
    "## 60. Find the length of the longest string in a string array.\n",
    "import numpy as np\n",
    "\n",
    "arr = np.array(['hello', 'world', 'a', 'test'])\n",
    "lengths = np.vectorize(len)(arr)\n",
    "max_length = np.max(lengths)\n",
    "print(max_length)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "703379f7-c51f-4adb-a130-c8527de47702",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean: 524.97\n",
      "Median: 551.5\n",
      "Variance: 82414.08910000001\n",
      "Standard Deviation: 287.07854169199067\n",
      "25th Percentile: 32.25\n",
      "75th Percentile: 77.25\n",
      "Correlation Coefficient: 0.9722718241315028\n",
      "Matrix Multiplication Result:\n",
      "[[19 22]\n",
      " [43 50]]\n",
      "Percentiles: [19.5 54.  88.1]\n",
      "Quartiles: [32.25 54.   77.25]\n",
      "Index of 3 : 2\n",
      "Sorted Array: [10 22 37 45 48 65 68 68 84 88]\n",
      "Elements greater than 20: [25 30]\n",
      "Elements divisible by 3: [ 9 15 30]\n",
      "Elements between 20 and 40: [25 30 35]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "## 61. Generate 100 random integers (1-1000) and compute mean, median, variance, and std deviation\n",
    "import numpy as np\n",
    "\n",
    "np.random.seed(0)\n",
    "arr = np.random.randint(1, 1001, size=100)\n",
    "mean = np.mean(arr)\n",
    "median = np.median(arr)\n",
    "variance = np.var(arr)\n",
    "std_dev = np.std(arr)\n",
    "print(\"Mean:\", mean)\n",
    "print(\"Median:\", median)\n",
    "print(\"Variance:\", variance)\n",
    "print(\"Standard Deviation:\", std_dev)\n",
    "## 62. Generate 50 random numbers (1-100) and compute the 25th and 75th percentiles.\n",
    "import numpy as np\n",
    "\n",
    "np.random.seed(0)\n",
    "arr = np.random.randint(1, 101, size=50)\n",
    "percentile_25 = np.percentile(arr, 25)\n",
    "percentile_75 = np.percentile(arr, 75)\n",
    "print(\"25th Percentile:\", percentile_25)\n",
    "print(\"75th Percentile:\", percentile_75)\n",
    "## 63. Compute correlation coefficient between two arrays using np.corrcoef.\n",
    "import numpy as np\n",
    "\n",
    "arr1 = np.array([1, 2, 3, 4, 5])\n",
    "arr2 = np.array([2, 3, 5, 7, 11])\n",
    "correlation = np.corrcoef(arr1, arr2)[0, 1]\n",
    "print(\"Correlation Coefficient:\", correlation)\n",
    "## 64. Perform matrix multiplication using np.dot.\n",
    "import numpy as np\n",
    "\n",
    "arr1 = np.array([[1, 2], [3, 4]])\n",
    "arr2 = np.array([[5, 6], [7, 8]])\n",
    "result = np.dot(arr1, arr2)\n",
    "print(\"Matrix Multiplication Result:\")\n",
    "print(result)\n",
    "## 65. Compute the 10th, 50th, and 90th percentiles and quartiles for an array of 50 integers\n",
    "import numpy as np\n",
    "\n",
    "np.random.seed(0)\n",
    "arr = np.random.randint(1, 101, size=50)\n",
    "percentiles = np.percentile(arr, [10, 50, 90])\n",
    "quartiles = np.percentile(arr, [25, 50, 75])\n",
    "print(\"Percentiles:\", percentiles)\n",
    "print(\"Quartiles:\", quartiles)\n",
    "## 66. Find index of a specific element in an array\n",
    "import numpy as np\n",
    "\n",
    "arr = np.array([1, 2, 3, 4, 5])\n",
    "element = 3\n",
    "index = np.where(arr == element)[0][0]\n",
    "print(\"Index of\", element, \":\", index)\n",
    "## 67. Sort a random array in ascending order.\n",
    "import numpy as np\n",
    "\n",
    "np.random.seed(0)\n",
    "arr = np.random.randint(1, 101, size=10)\n",
    "arr_sorted = np.sort(arr)\n",
    "print(\"Sorted Array:\", arr_sorted)\n",
    "## 68. Filter elements greater than 20.\n",
    "import numpy as np\n",
    "\n",
    "arr = np.array([10, 25, 15, 30, 5])\n",
    "filtered = arr[arr > 20]\n",
    "print(\"Elements greater than 20:\", filtered)\n",
    "## 69. Filter elements divisible by 3.\n",
    "import numpy as np\n",
    "\n",
    "arr = np.array([10, 9, 15, 30, 5])\n",
    "filtered = arr[arr % 3 == 0]\n",
    "print(\"Elements divisible by 3:\", filtered)\n",
    "## 70. Filter elements between 20 and 40 (inclusive).\n",
    "import numpy as np\n",
    "\n",
    "arr = np.array([10, 25, 15, 30, 5, 35, 45])\n",
    "filtered = arr[(arr >= 20) & (arr <= 40)]\n",
    "print(\"Elements between 20 and 40:\", filtered)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "8b942ac5-1c28-4011-87ba-792824e90b7e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Byte Order: =\n",
      "Original Array: [1 0 0 0 2 0 0 0 3 0 0 0]\n",
      "Byte Swapped Array: [0 0 0 1 0 0 0 2 0 0 0 3]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "## 71. Check byte order of a NumPy array using dtype.byteorder.\n",
    "import numpy as np\n",
    "\n",
    "arr = np.array([1, 2, 3], dtype=np.int32)\n",
    "byte_order = arr.dtype.byteorder\n",
    "print(\"Byte Order:\", byte_order)\n",
    "## 72. Perform in-place byte swapping using byteswap().\n",
    "import numpy as np\n",
    "\n",
    "arr = np.array([1, 2, 3], dtype=np.int32)\n",
    "print(\"Original Array:\", arr.view(np.uint8))\n",
    "arr.byteswap(inplace=True)\n",
    "print(\"Byte Swapped Array:\", arr.view(np.uint8))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "133de9a8-3fd7-4cd7-8730-eb4229c4a097",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "483f9756-6a55-4dd3-b84a-fc581abbd472",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5ca04005-acfc-487f-a3e4-c37490dc5b01",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b1f01f40-6908-4723-b28b-7ee722bbb1c7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
